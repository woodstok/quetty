= Quetty =

2 parts
== Tokenizer ==
With given input text, and a list of matching rules, 
should return output with tokens that meet the satisfy the rules
===== matching rules ===== Should they be
	- functions? < lacks configurability
		- any way of packaging go single files and dynamically loading them?
	- config json file with regex
		- lacks flexibilty for matching rule i.e extra control/valiadation that we can write via code
Currently going with individual rule functions

Start with tests



== Terminal Plugin ==
1. Capture terminal contents 
2. Send to tokenizer
3. Display Output through fzf
4. If entry selected, send the content back to terminal
5. Option to send it to vim first for editing before sending it back to terminal!!!
Currently, implement for tmux.
=== tmux ===

=== vim ===


== Installer script ==
Follow fzf pattern

== Tasks ==
- [X] Study basic TDD with go
- [X] Setup infra for tests to start failing
- [X] Add splitFunc as parameter
- [X] Add space delimited tokenizer
- [X] Add path tokenizer
- [X] Add regex tokenizer
- [X] Change tokenizers to return error
- [X] change structure to build main application
- [X] add cli arguments/switches
- [X] add tokenizer combiner ( or operation )?? Is this needed
- [X] add goldenfile tests
- [X] add path tokenizer/tests
- [X] sort golden files so that test-update does not always rearrange the lines
- [X] add ip address tokenizer/tests
- [X] add identifier tokenizer/tests
- [ ] parallelize tokenMgr
    - [ ] make tokenset threadsafe

=== Implement tfzf in go ===
bind-key -n M-i run-shell "tmux split-window -l 15 tfzf #I #P -a"
tfzf currently uses bind key scripts and non modified fzf
change quetty to mimic tfzf
- [ ] export tmux code to separate project/library
- [ ] how to run tmux command 
	- [ ] get full output >> for basic commands like list-panes, display-message
	- [ ] pass/return the pipe to be used by other functions
	- [ ] have a multiplexer from different panes(?) to quetty input channel
	- [ ] add tmux verifier  - check that tmux is running, can get output etc
- [ ] currently we pass in the pane, window via the tmux script. change that to autodetect current pane/window
- [ ]  get pane list based on all panes, all windows
- [ ] implement capture pane.
- [ ] implement fzf yank >> check tmux yank
- [ ] implement fzf key bindings
- [ ] implement fzf keybinding headers
- [ ] add setup verifier
	- [ ] check tmux running
	- [ ] check fzf version
	- [ ] check fzf-tmux
	- [ ] additional checks
- [ ] need a better identifier tokenizer, or way to change regex delims like add hiphen, ignore hiphen etc



- [ ] cleanup functions. 
- [ ] create proper handlers /printers/ readers
- [ ] find out best way to handle defer/closes of pipes and files
- [ ] also parallel read/write of pipes with proper channels and closes
- [ ] hash/quetty not working properly?
- [ ] add input flag to quetty. take from input/ tmux temp file/ tmux 
- [ ] tmux >> bind-key -n M-i run-shell -b "quetty -word"
- [ ] give an option to edit the word in editor ( vim/emacs? )
- [ ] keep cache of previously selected items in history??
